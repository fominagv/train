package lesson_04.homeWork;

public class HW_CreativeClasses {

//TODO
  /* Создайте Класс Employee и его наследников (QA, Programmer, Manager).
   Класс Employee содержит три  поля: employeeName,  employeeAddress и annualSalary, а также метод displayDetails
   предназначенный для вывода всех значений переменных класса для объекта и метод askMeeting,
   который для любого другого объекта класса Employee выводит некоторое выражение String.
   Класс QA содержит дополнительное  specialization;
   Класс Programmer дополнитеотное поле language;
   Класс Manager дополнитеотное поле bonus;
    Для этого выполните следующие действия:
    Создайте класс Employee. Определите в нем переменные класса (employeeName, employeeAddress и annualSalary) с модификатором доступа private соответствующего типа (String или float).
    Унаследуйте классы QA, Programmer, Manager от Employee. Определите в них специфические переменные класса с модификатором доступа private соответствующего типа (String или float).
    Создайте методы get и set для переменных класса. (Можно сгенерироваить)
    Создайте методы - конструкторы для инициализации переменных классов с различными сигнатурами.
    Создайте метод toString.(Можно сгенерировать).В данном случае мы переопределяем свойственный всем классам метод toString(),
    с тем, чтобы выводились необходимые нам значения объекта класса вместо мало информативной ссылки на объект по умолчанию.
    Перед описанием метода  устанавливается аннотация @Override, которая сообщает компилятору, что метод переписывается.
    Cоздайте метод displayDetails(), который возвращает значения полей класса c использованием оператора  return  employeeName + " " + employeeAddress+ " "+  annualSalary;
    Создайте  public String askMeeting(Employee e). Как видно из сигнатуры, метод возвращает значение String, которое пусть будет сообщением-приглашением на встречу формируемое с помощью оператора  return "Дорогой " + e.getEmployeeName() + " я буду рад(а) встрече с Вами по адресу " + employeeAddress;.
    Корректным будет обращение только из объекта класса Employee, который поддерживает метод getEmployeeName().
    Создайте класс Main с методом  main(), в котором следует выполнить следующие действия:
    1. Создать  три разных объекта  с именами o1, o2, o3 с помощью операторов:
    QA o1 = new QA (<....>);
    Programmer o2 = new Programmer (<....>);
    Manager o3 = new Manager (<....>);
    2. Вывести сведения  о значениях объектных переменных для каждого объекта o1, o2, o3, используя метод displayDetails(), например, System.out.println(o2.displayDetails());
    3. Выведите на экран годовую зарплату всех созданных объектов как сумму соответствующих полей объектов o1,o2 и  o3. Например так:
            System.out.println("Сумма = "+(o1.annualSalary + o2.annualSalary + o3.annualSalary));
    4. В конце метода main()  выведите сообщение, полученное при выполнении метода askMeeting обращением  от объекта o1 к объекту o3, например, так:  System.out.println(o3.askMeeting(o1));
    5. И в заключение выполните команду System.out.println(o2), в которой неявно используется  вызов переопределенного метода toString(), имеющийся в каждом объекте.
     Кроме того напишите оператор, который создает объект только на время использования его в операторе, например так: System.out.println(new Employee("AAAAAAAAAA", "BBBBBBBBBB", 10000));
    Выполните созданный вами класс.
*/
}
