package lesson_03.examples;

import java.awt.Point;

/**
 * Created by galina on 3/9/16.
 */
public class NamesAndPackages {

 /*******************   ПАКЕТЫ  ***********************
  Пакеты (packages) в Java – это способ логически группировать классы.
  Кроме классов и интерфейсов в пакетах могут находиться вложенные пакеты.
  Имена бывают простыми, состоящими из одного идентификатора (они определяются во время объявления)
  и составными (qualified), состоящими из последовательности идентификаторов, разделенных точкой.
  Чтобы получить составное имя пакета, необходимо к полному имени пакета, в котором он располагается, добавить точку,а затем его собственное простое имя.
  Например, составное имя пакета java.lang (то есть простое имя этого пакета lang, и он находится в пакете java).
  Простое имя классов и интерфейсов дается при объявлении, например, Object, String, Point.
  Чтобы получить составное имя таких типов, надо к составному имени пакета, в котором находится тип, через точку добавить простое имя типа.
  Например, java.lang.Object, java.lang.reflect.Method
  Для ссылочных типов элементами являются поля и методы, а также внутренние типы (классы и интерфейсы).
  Элементы могут быть как непосредственно объявлены в классе, так и получены по наследству от родительских классов и интерфейсов, если таковые имеются.
  Простое имя элементов также дается при инициализации. Например, toString(), PI, InnerClass.
  Каждый пакет имеет свое пространство имен, что позволяет создавать одноименные классы в различных пакетах.
   *******************************************************/

/*********************  COMPILATION UNIT   **************************
 Модуль компиляции хранится в текстовом .java -файле и является единичной порцией входных данных для компилятора.
 Он состоит из трех частей: объявление пакета, import -выражения, объявления верхнего уровня.

 Oбъявление пакета - записывается с помощью ключевого слова package, после которого указывается полное имя пакета. //package lesson_03.examples;
 Если это выражение отсутствует, то такой модуль компиляции принадлежит безымянному пакету.

 import -выражения, позволяющие импортировать типы в модуль компиляции(хранится в текстовом .java -файле и является единичной порцией входных данных для компилятора)
 и далее обращаться к ним по простым именам.
 Существует два вида таких выражений:
 импорт одного типа  --  import java.net.URL;  Ключевое слово import и полногое имя типа.
 импорт пакета       --  import java.awt.*;    Ключевое слово import и полногое имя пакеты .*
 Aлгоритм работы компилятора состоит из трех шагов:
  - сначала просматриваются выражения, импортирующие типы;
  - затем другие типы, объявленные в текущем пакете, в том числе в текущем модуле компиляции;
  - наконец, просматриваются выражения, импортирующие пакеты.
  */
class Line {
 void main() {
  System.out.println(new Point()); // Результат java.awt.Point[x=0,y=0]
  System.out.println(new  lesson_03.examples.Point()); //Результат lesson_03.examples.Point@60e53b93
 }
}

 /*  Объявление верхнего уровня
 Объявление класса начинается с ключевого слова class, интерфейса – interface.
 Далее указывается имя типа, а затем в фигурных скобках описывается тело типа.
*/

 /****************** ОБЛАСТЬ ВИДИМОСТИ *******************
  Чтобы не координировать имена, которые даются различным конструкциям языка, у каждого имени есть область видимости (scope).
  Областью видимости объявления некоторого элемента языка называется часть программы, откуда допускается обращение к этому элементу по простому имени.

  Область видимости доступного пакета – вся программа, то есть любой класс может использовать доступный пакет.
  Однако необходимо помнить, что обращаться к пакету можно только по его полному составному имени.
  К пакету java.lang ни из какого места нельзя обратиться как к просто lang.

   Областью видимости типа (класса или интерфейса) верхнего уровня является пакет, в котором он объявлен.
  Из других пакетов доступ возможен либо по составному имени, либо с помощью импортирующего выражения

  Область видимости элементов классов или интерфейсов – это все тело типа, в котором они объявлены.
  Если обращение к этим элементам происходит из другого типа, необходимо воспользоваться составным именем.
  Имя может быть составлено из простого или составного имени типа, имени объектной переменной или ключевых слов super или this,
  после чего через точку указывается простое имя элемента.

  Аргументы метода, конструктора или обработчика ошибок видны только внутри этих конструкций и не могут быть доступны извне.

  Область видимости локальных переменных начинается с момента их инициализации и до конца блока, в котором они объявлены.
  В отличие от полей типов, локальные переменные не имеют значений по умолчанию и должны инициализироваться явно.
  */

// Пример:
 class Point1 {
  int x,y;
  int getX() {
   return x; // простое имя
  }
 }
 class Test {
  void main() {
   Point1 p1 = new Point1();
   p1.x=3; // составное имя
  }
 }

  public static void main(String[] args) {
   int x;
   for (int i=0; i<10; i++) {
    int t=5+i;
   }
// здесь переменная t уже недоступна, так как блок, в котором она была объявлена,
// уже завершен, а переменная x еще недоступна, так как пока не была
// инициализирована

    }
       /***********    "Затеняющее" объявление (Shadowing)   ***********/
   /*
   Самыми распространенными случаями возникновения конфликта имен является выражение, импортирующее пакет,
   и объявление локальных переменных, или параметров методов, конструкторов, обработчиков ошибок.

   Проблема перекрытия имен полей класса и локальных переменных.*/
       class Human {
        int age;
        // возраст
        int getAge() {
         return age;
        }
        void setAge(int age) {
         age=age; // ??? в первом случае подразумевая поле класса, во втором - параметр метода
         /*Почкму возник конфликт?
         Есть два элемента языка – аргумент метода и поле класса, области видимости которых пересеклись.
         Область видимости поля класса больше, она охватывает все тело класса, в то время как область видимости аргумента метода включает только сам метод.
         В таком случае внутри области пересечения по простому имени доступен именно аргумент метода, а поле класса "затеняется" (shadowing) объявлением параметра метода.
         Если доступ по простому имени невозможен, надо воспользоваться составным. Здесь удобнее всего применить специальное ключевое слово this
         Слово this имеет значение ссылки на объект, внутри которого оно применяется.*/
         this.age = age;
        }
       }



 /***************** "Заслоняющее" объявление (Obscuring) *************************/
 //Пример класс Obscuring

 /**********  Соглашения по именованию ******************/
 /*
  ПАКЕТЫ - Имя каждого пакета начинается с маленькой буквы и представляет собой, как правило, одно недлинное слово.
  Если требуется составить название из нескольких слов, можно воспользоваться знаком подчеркивания или начинать следующее слово с большой буквы.
  Имя пакета верхнего уровня обычно соответствует доменному имени первого уровня.
  Названия java и javax ( Java eXtension ) зарезервированы компанией Sun для стандартных пакетов Java.

  ТИПЫ - Имена типов начинаются с большой буквы и могут состоять из нескольких слов,
  каждое следующее слово также начинается с большой буквы.
  Имена классов, как правило, являются существительными. (Human, HighGreenOak, ArrayIndexOutOfBoundsException)
  Аналогично задаются имена интерфейсов, хотя они не обязательно должны быть существительными.
  Часто используется английский суффикс "able" (Runnable, Serializable, Cloneable)

  МЕТОДЫ - Имена методов должны быть глаголами и обозначать действия, которые совершает данный метод.
  Имя должно начинаться с маленькой буквы, но может состоять из нескольких слов, причем каждое следующее слово начинается с заглавной буквы.
  Существует ряд принятых названий для методов:
     - если методы предназначены для чтения и изменения значения переменной, то их имена начинаются, соответственно, с get и set,
      например, для переменной size это будут getSize() и setSize() ;
     - метод, возвращающий длину, называется length(), например, в классе String ;
     - имя метода, который проверяет булевское условие, начинается с is, например, isVisible() у компонента графического пользовательского интерфейса;
     - метод, который преобразует величину в формат F, называется toF(), например, метод toString(), который приводит любой объект к строке.

  ПОЛЯ КЛАССА - Поля класса имеют имена, записываемые в том же стиле, что и для методов, начинаются с маленькой буквы,
  могут состоять из нескольких слов, каждое следующее слово начинается с заглавной буквы.
  Имена должны быть существительными, например, поле name в классе Human, или size в классе Planet.

 КОНСТАНТЫ - Поля могут быть константами, если в их объявлении стоит ключевое слово final.
 Их имена состоят из последовательности слов, сокращений, аббревиатур. Записываются они только большими буквами,
 слова разделяются знаками подчеркивания: PI, MIN_VALUE, MAX_VALUE

 ЛОКАЛЬНЫЕ ПЕРЕМЕННЫЕ И ПАРАМЕТРЫ МЕТОДОВ, КОНСТРУКТОРОВ -  Они, как правило, довольно короткие, но, тем не менее, должны быть осмыслены.
 Например, можно использовать аббревиатуру (имя cp для ссылки на экземпляр класса ColorPoint) или сокращение ( buf для buffer ).
  */

}