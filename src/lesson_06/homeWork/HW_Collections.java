package lesson_06.homeWork;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

/**
 * Created by galina on 4/2/16.
 */
public class HW_Collections {
    //TODO  дополнить класс Book приведеными ниже методами выполняющими следующие операции над списком книг
    public class Book {
        String title;
        List<String> authors;
        int yearOfPublising;
        /*  public static Map<String, List<Book>> groupBooksByAuthors(List<Book> books) { ... }
    [books] -> {author: [books]}
    List<Book> -> Map<String, List<Book>> - сгруппировать книги по авторам
    Пример: {'Толстой'=['Война и мир']; 'Достоевский'=['Идиотъ', 'Преступление и наказание']; ...} */


        /* public static Map<Integer, Set<String>> findTopAuthorsPerEachYear(List<Book> books) { ... }
    [books] -> {year: [top year authors]}
    List<Book> -> Map<Integer, Set<String>> - составить топ авторов за каждый год (т.е., те авторы, которые написали больше всего книг за данный год)
    Пример: (1984=['Кинг'], 1990=['Роулинг', 'Фрай'], ...)
*/

    }
}
   //TODO Создать класс ListComparator реализуюший интерфейс Comparator для объектов классов LinkedList,
   // сравнивающих 2 объекта по количеству элементов содержащихся в списке.

   //TODO  Реализовать приложение, принимающее массивы строк и формирующее объекты класса LinkedList, содержащее слова строки, и
   //  помещающее полученные объекты в объект класса SortedSet, созданный с использованием реализованного в предыдущем задании
   // объекта класса ListComparator и выводящее на экран содержимого созданного объекта класса SortedSet.

//TODO Реализовать класс выполняющий:
    /*  • поиск всех вхождений подстроки в строке,
        • всех вхождений заданной подстроки в списке строк (объектов классов реализующих интерфейс List),
        • всех элементов массива строк совпадающих с искомой подстрокой,
        • всех вхождений искомой строки в объекте реализующим интерфейс Map.
        Результат должен возвращаться в виде объекта вложенного в класс локального класса,
        и обладающего следующими полями – время проведения поиска, длительность поиска, индексы начала вхождений при поиске подстроки в строке,
        индексы элементов при поиске в списке и ключи при поиске в картах.
        */

